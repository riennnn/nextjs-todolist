// あとで削除します

import Head from 'next/head'
import React, { useState, useEffect } from 'react'
import { Heading, Select, Box, Flex, Spacer, Container } from '@chakra-ui/react'
import { DeleteIcon, EditIcon } from '@chakra-ui/icons'
import {
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  TableContainer,
} from '@chakra-ui/react'

import { ResetButton } from './components/resetButton'
import { SearchInput } from './components/searchInput'

function Top() {

  const status = [
    {
      text: "not started",
      backgroundColor: "orange.100",
      color: "blackAlpha.800",
      word: "NOT STARTED"
    },
  
    {
      text: "doing",
      backgroundColor: "orange.500",
      color: "white",
      word: "DOING"
    },
  
    {
      text: "done",
      backgroundColor: "orange.300",
      color: "blackAlpha.800",
      word: "DONE"
    }
  ];  

  const [todos, setTodos] = useState([
    { id: 1,
      title: "Github上に静的サイトをホスティングする",
      status: "not started",
      createDate: "2020-11-8 18:55",
      updateDate: "2020-11-8 18:55",
      action: "icons",
    },
    { id: 2,
      title: "ReactでTodoサイトを作成する",
      status: "doing",
      createDate: "2020-11-8 18:55",
      updateDate: "2020-11-8 18:55",
      action: "icons",
    },
    { id: 3,
      title: "Firestore Hostingを学習する",
      status: "done",
      createDate: "2020-11-8 18:55",
      updateDate: "2020-11-8 18:55",
      action: "icons",
    },
  ]); //②todoリストのstateを定義（初期値）

  const [todoSearchTitle, setTodoSearchTitle] = useState('');
  // // const [todoTitle, setTodoTitle] = useState('') //③新規todoのstateを定義
  // // const [todoId, setTodoId] = useState(todos.length +1) //④新規todoのidを定義
  // // const [isEditable, setIsEditable] = useState(false) //⑤編集画面への切り替え定義
  // // const[editId, setEditId] = useState('') //⑤編集したいtodoのid状態を定義
  // // const [newTitle, setNewTitle] = useState('') //⑥編集後の新タイトルを定義
  const [filter, setFilter] = useState('-------') //⑨フィルターのstate定義
  const [filteredTodos, setFilteredTodos] = useState([]) //⑩絞り込み後のtodoリストのstateを定義

  // const handleDeleteTodo = (targetTodo) => {
  //   setTodos(todos.filter((todo) => todo !==targetTodo))
  // } //⑤対象のtodoをリストから削除する関数
  
  // const handleOpenEditPage = (todo) => {
  //   setIsEditable(true)
  //   setEditId(todo.id) //編集対象のtodo.idを指定
  //   setNewTitle(todo.title) //⑥編集対象の新たなtodoタイトルをinputに表示
  // }
  // //⑤editIconを押した時の機能定義

  // const handleEditTodo = () => {
  //   const newArray = todos.map((todo) =>
  //   todo.id === editId? {...todo, title:newTitle} : todo)setTodos(newArray)
  //   setNewTitle('')
  //   setEditId('')
  // }
  // //⑦編集内容をtodoリストの配列に加える関数

  // const handleStatusChange = (targetTodo, e) => {
  //   const newArray = todos.map((todo) => todo.id === targetTodo.id ? {...todo, status:e.target.value } : todo )
  //   setTodos(newArray)
  // }
  // // ⑧ステータス変更後のtodoリストを更新する関数

  useEffect(() => {
    const filteringTodos = () => {
      switch (filter) {
        case 'notStarted':
          setFilteredTodos(todos.filter((todo) => todo.status === 'not started'))
          break
        case 'doing':
          setFilteredTodos(todos.filter((todo) => todo.status === 'doing'))
          break
        case 'done':
          setFilteredTodos(todos.filter((todo) => todo.status === 'done'))
          break
        default:
          setFilteredTodos(todos)
      }
    }
    filteringTodos() //11関数呼び出し
  }, [filter, todos])
  // 11絞り込みの処理

  return (
    <div>
      <Head>
        <title>List</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <Box bg='yellow.200' w='100%' p={3}>
        <Heading as='h1' size='4xl' maxW='1080px' m="0 auto">NEXT TODO</Heading>
      </Box>

      <Box maxW='1080px' m='0 auto'>
        <Container w='100%' maxW='1080px' pt='16px'>
          <Heading as='h2' size='2xl' mt="2">TODO LIST</Heading>
          <Box display='flex' mt='32px' mb='32px'>  
            <Box>
              <p>SEARCH</p>
              <SearchInput todoSearchTitle={todoSearchTitle} setTodoSearchTitle={setTodoSearchTitle} />
            </Box>
            <Box ml='15px'>
              <p>STATUS</p>
              <Select value={filter} onChange={(e) => setFilter(e.target.value)}>
                {/* ⑨state定義したfilterと紐付け ⑩フィルターの値を保持*/}
                <option value='all'>-------</option>
                <option value='notStarted'>NOT STARTED</option>
                <option value='doing'>DOING</option>
                <option value='done'>DONE</option>
              </Select>
            </Box>
            <ResetButton />
            <Spacer />
            <Box mt='10'>
              <EditIcon />
            </Box>
          </Box>

          <TableContainer>
            <Table size='sm' variant='simple'>
              <Thead size='3xl' bg='orange.200' height="16">
                <Tr>
                  <Th textAlign="center" fontSize="2xl" textTransform="none">Task</Th>
                  <Th textAlign="center" fontSize="2xl" textTransform="none">Status</Th>
                  <Th textAlign="center" fontSize="2xl" textTransform="none">Create</Th>
                  <Th textAlign="center" fontSize="2xl" textTransform="none">Update</Th>
                  <Th textAlign="center" fontSize="2xl" textTransform="none">Action</Th>
                </Tr>
              </Thead>
              <Tbody>
                {filteredTodos.map((todo)=> (
                  // 11絞り込んだtodoを一覧に渡す
                  // {todo.map((todo) => (
                  // ①記入したtodoをmap関数で展開する
                      <Tr key={todo.id}>  
                        {/* //map関数にはkeyが必要 */}
                        <Td fontWeight="bold">{todo.title}{todo}</Td>
                        {/* //①{todo.title}で受け取る。以下/status/createDate/updateDate同様 */}
    
                        <Td>
                          <Select 
                            // bg={status.map((value) => todo.status === value.text && value.backgroundColor)}
                            bg={status.find((value) => todo.status === value.text).backgroundColor}
                            color={status.find((value) => todo.status === value.text).color}
                            borderColor='blackAlpha.800'
                            borderRadius='full'
                            value={todo.status} 
                            onChange={(e) => handleStatusChange(todo, e)}
                            // {/* ⑧セレクトボックスの操作時に関数実行 */}
                            fontWeight="bold"
                          >
                            {status.map((value, index) => (
                              <option key={index} value={value.text}>{value.word}</option>
                            ))}
                          </Select>
                        </Td>
    
                        <Td textAlign="center" fontWeight="bold">
                          {todo.createDate}
                        </Td>
                        
                        <Td textAlign="center" fontWeight="bold">
                          {todo.updateDate}
                        </Td>
    
                        <Td>
                          <Flex justifyContent="center">
                            <button style={{display: "inline-block", marginRight: "10px"}} ml='150px'  onClick={() =>handleOpenEditPage(todo)}><EditIcon /></button>
                            <button onClick={() => handleDeleteTodo(todo)} ml={5}
                            ><DeleteIcon /></button>
                          </Flex>
                        </Td>
                      </Tr>
                    // ))}
                ))}
              </Tbody>
            </Table>
          </TableContainer>
        </Container>
      </Box>
    </div>
  )
}

export default Top;